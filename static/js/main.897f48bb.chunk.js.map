{"version":3,"sources":["components/Header.js","components/CSVinput.js","components/Clock.js","components/Schedule.js","fiorDiLatte.png","App.js","serviceWorker.js","index.js"],"names":["Header","fileReader","props","className","Clock","state","date","Date","this","timerID","setInterval","tick","clearInterval","setState","id","toLocaleTimeString","React","Component","CSVinput","handleFileRead","e","content","result","split","map","row","onCSVUpload","handleChange","fileUpload","fileInput","current","files","type","isFileValid","file","fileInputLabel","textContent","name","console","log","handleSubmit","bind","createRef","hasTriedUpload","event","preventDefault","FileReader","onloadend","readAsText","onSubmit","accept","ref","onChange","htmlFor","data-browse","Schedule","handleCSVUpload","data","rowData","tableCell","index","headers","tableBody","header","tableRow","makeRow","getTable","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.897f48bb.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header(props) {\n  return (\n    <header className=\"py-2 px-4 bg-secondary text-white\">\n      <h1>Time Manager Thing</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nlet fileReader;\n\nclass CSVinput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.fileInput = React.createRef();\n    this.fileInputLabel = React.createRef();\n    // file: stores the user's file input\n    // isFileValid: tracks if file is a csv\n    this.state = { file: null, hasTriedUpload: false, isFileValid: false };\n  }\n\n  // helper to read the file\n  handleFileRead = e => {\n    const content = fileReader.result.split(\"\\n\").map(row => row.split(\",\"));\n    // console.log(content);\n    // pass data up\n    this.props.onCSVUpload(content);\n  };\n\n  // handle user file upload\n  handleSubmit(event) {\n    event.preventDefault();\n    // If the file is a csv, read it.  Otherwise, don't.\n    if (this.state.isFileValid) {\n      console.log(\"yay\");\n      // read the csv\n      fileReader = new FileReader();\n      fileReader.onloadend = this.handleFileRead;\n      fileReader.readAsText(this.state.file);\n    } else {\n      console.log(\"booo\");\n    }\n  }\n\n  // handle file input change  must be arrow function\n  handleChange = e => {\n    // get the user's input\n    let fileUpload = this.fileInput.current.files[0];\n    if (!fileUpload) console.log(\"nofile\");\n    else {\n      if (fileUpload.type === \"text/csv\") {\n        this.setState({ isFileValid: true, file: fileUpload });\n      } else {\n        this.setState({ isFileValid: false });\n      }\n      this.fileInputLabel.current.textContent = fileUpload.name;\n    }\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        {/* ALL FILE INPUTS ARE UNCONTROLLABLE STATE THINGS */}\n        <div className=\"input-group mb-3\">\n          <div className=\"custom-file\">\n            <input\n              type=\"file\"\n              accept=\".csv\"\n              className={`custom-file-input ${\n                this.state.isFileValid ? \"is-valid\" : \"is-invalid\"\n              }`}\n              id=\"csvInput\"\n              ref={this.fileInput}\n              onChange={this.handleChange}\n            />\n            <label\n              className=\"custom-file-label\"\n              htmlFor=\"csvInput\"\n              data-browse=\"Upload a CSV\"\n              ref={this.fileInputLabel}\n            >\n              Choose file\n            </label>\n            <div className=\"invalid-feedback\">\n              Please provide a CSV file\n            </div>\n          </div>\n        </div>\n\n        <br />\n        <button className=\"btn btn-primary\" type=\"submit\">\n          Submit\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default CSVinput;\n","import React from \"react\";\n// const dayjs = require(\"dayjs\");\n\n// with help from https://reactjs.org/docs/state-and-lifecycle.html\nclass Clock extends React.Component {\n  // let now = dayjs();\n  //  console.log(now.format(\"h:mm:ss a\"));\n  constructor(props) {\n    super(props);\n    this.state = { date: new Date() };\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n  \n  render() {\n    return (\n      <div id=\"clock\" className=\"flex-grow-1\">\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n\nexport default Clock;\n","import React from \"react\";\nimport CSVinput from \"./CSVinput.js\";\n\nclass Schedule extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleCSVUpload = this.handleCSVUpload.bind(this);\n    this.state = { data: null };\n  }\n\n  handleCSVUpload(data) {\n    this.setState({ data: data });\n  }\n\n  makeRow(rowData) {\n    return rowData.map((tableCell, index) => <td key={index}>{tableCell}</td>);\n  }\n\n  getTable() {\n    var [headers, ...tableBody] = this.state.data;\n    console.log(headers);\n    console.log(tableBody);\n    return (\n      <table className=\"table\">\n        <thead>\n          <tr>\n            {headers.map((header, index) => (\n              <th key={index}>{header}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {tableBody.map((tableRow, index) => (\n            <tr key={index}>{this.makeRow(tableRow)}</tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n  render() {\n    return (\n      <div id=\"schedule\">\n        <h1>Schedule Div</h1>\n        {this.state.data ? (\n          this.getTable()\n        ) : (\n          <CSVinput onCSVUpload={this.handleCSVUpload} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Schedule;\n","export default __webpack_public_path__ + \"static/media/fiorDiLatte.9f2b5de5.png\";","import React from \"react\";\nimport { Header, Clock, Schedule } from \"./components\";\nimport fiorDiLatte from \"./fiorDiLatte.png\";\n// <!img src={fiorDiLatte} className=\"img-fluid\" alt=\"fiorDiLatte\" />\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"py-3 px-5\">\n        <Clock />\n        <Schedule />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}